# Python stubs generated by omniidl from hangman.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "Program_Hangman"
#
__name__ = "Program_Hangman"
_0_Program_Hangman = omniORB.openModule("Program_Hangman", r"hangman.idl")
_0_Program_Hangman__POA = omniORB.openModule("Program_Hangman__POA", r"hangman.idl")


# interface HangMan
_0_Program_Hangman._d_HangMan = (omniORB.tcInternal.tv_objref, "IDL:Program_Hangman/HangMan:1.0", "HangMan")
omniORB.typeMapping["IDL:Program_Hangman/HangMan:1.0"] = _0_Program_Hangman._d_HangMan
_0_Program_Hangman.HangMan = omniORB.newEmptyClass()
class HangMan :
    _NP_RepositoryId = _0_Program_Hangman._d_HangMan[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Program_Hangman.HangMan = HangMan
_0_Program_Hangman._tc_HangMan = omniORB.tcInternal.createTypeCode(_0_Program_Hangman._d_HangMan)
omniORB.registerType(HangMan._NP_RepositoryId, _0_Program_Hangman._d_HangMan, _0_Program_Hangman._tc_HangMan)

# HangMan operations and attributes
HangMan._d__get_ques_no = ((),(omniORB.tcInternal.tv_long,),None)
HangMan._d__set_ques_no = ((omniORB.tcInternal.tv_long,),(),None)
HangMan._d_get_answer = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
HangMan._d_get_question = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)

# HangMan object reference
class _objref_HangMan (CORBA.Object):
    _NP_RepositoryId = HangMan._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def _get_ques_no(self, *args):
        return self._obj.invoke("_get_ques_no", _0_Program_Hangman.HangMan._d__get_ques_no, args)

    def _set_ques_no(self, *args):
        return self._obj.invoke("_set_ques_no", _0_Program_Hangman.HangMan._d__set_ques_no, args)

    ques_no = property(_get_ques_no, _set_ques_no)


    def get_answer(self, *args):
        return self._obj.invoke("get_answer", _0_Program_Hangman.HangMan._d_get_answer, args)

    def get_question(self, *args):
        return self._obj.invoke("get_question", _0_Program_Hangman.HangMan._d_get_question, args)

omniORB.registerObjref(HangMan._NP_RepositoryId, _objref_HangMan)
_0_Program_Hangman._objref_HangMan = _objref_HangMan
del HangMan, _objref_HangMan

# HangMan skeleton
__name__ = "Program_Hangman__POA"
class HangMan (PortableServer.Servant):
    _NP_RepositoryId = _0_Program_Hangman.HangMan._NP_RepositoryId


    _omni_op_d = {"_get_ques_no": _0_Program_Hangman.HangMan._d__get_ques_no, "_set_ques_no": _0_Program_Hangman.HangMan._d__set_ques_no, "get_answer": _0_Program_Hangman.HangMan._d_get_answer, "get_question": _0_Program_Hangman.HangMan._d_get_question}

HangMan._omni_skeleton = HangMan
_0_Program_Hangman__POA.HangMan = HangMan
omniORB.registerSkeleton(HangMan._NP_RepositoryId, HangMan)
del HangMan
__name__ = "Program_Hangman"

#
# End of module "Program_Hangman"
#
__name__ = "hangman_idl"

_exported_modules = ( "Program_Hangman", )

# The end.
